// <SnippetAddUsings>
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows.Forms;
// </SnippetAddUsings>

namespace Logo_Anl
{
    class ClassifyBusiness
    {
        //Global variables
        static readonly string _assetsPath = Path.Combine(Environment.CurrentDirectory, "assets");
        static readonly string _imagesFolder = Path.Combine(_assetsPath, "images");
        static readonly string _trainTagsTsv = Path.Combine(_imagesFolder, "tags.tsv");
        static readonly string _testTagsTsv = Path.Combine(_imagesFolder, "test-tags.tsv");
        public static string _predictSingleImage;
        static readonly string _inceptionTensorFlowModel = Path.Combine(_assetsPath, "inception", "tensorflow_inception_graph.pb");


        static Stack<string> StackMetrics = new Stack<string>();
        static Queue<string> TrainingResults = new Queue<string>();

        public static Queue<string> BusinessClassifier(string Logo)
        {
            _predictSingleImage = Logo;
            Queue<string> Classifier = new Queue<string>();
            //instantiation of MLContext ~~~ This is the common context required for any pproject using ML.Net
            //MLContect create a new ML.NET environment which is then shared across the model creation workflow objects
            MLContext mlContext = new MLContext();
            // </SnippetCreateMLContext>

            //Instantiate model via calling method GenerateModel and passing in the instantiation of MLContext > mlContext
            ITransformer model = GenerateModel(mlContext);

            //Call class ClassifySingleLogo
            //This class will allow for the business classification of a single logo
            string BusinessClassification = ClassifySingleLogo(mlContext, model);
            //Console.WriteLine(BusinessClassification); ~~ was used to make sure that BusinessClassification work in a console application
            if (TrainingResults.Count == 0)
            {
                MessageBox.Show("TrainingResults is empty");
            }
            if (StackMetrics.Count == 0)
            {
                MessageBox.Show("StackMetrics is empty");
            }
            while (TrainingResults.Count != 0)
            {
                Classifier.Enqueue(TrainingResults.Dequeue());
            }
            while (StackMetrics.Peek() != string.Empty)
            {
                Classifier.Enqueue(StackMetrics.Pop());
            }
            Classifier.Enqueue(BusinessClassification);
            return Classifier;
        }

        // Build and train classification model
        public static ITransformer GenerateModel(MLContext mlContext)
        {
            //Instantiate the pipeline
            //the pipeline is an end-to-end construct that controlls the flow of data into the machine learning model
            IEstimator<ITransformer> pipeline = mlContext.Transforms.LoadImages(outputColumnName: "input", imageFolder: _imagesFolder, inputColumnName: nameof(ImageData.ImagePath))
                            // The image transforms transform the images into the model's expected format.
                            .Append(mlContext.Transforms.ResizeImages(outputColumnName: "input", imageWidth: InceptionSettings.ImageWidth, imageHeight: InceptionSettings.ImageHeight, inputColumnName: "input"))
                            .Append(mlContext.Transforms.ExtractPixels(outputColumnName: "input", interleavePixelColors: InceptionSettings.ChannelsLast, offsetImage: InceptionSettings.Mean))

                            // The ScoreTensorFlowModel transform scores the TensorFlow model and allows communication
                            //loads the TensorFlow model, applies inputs to deep learning model, generates an output using the input ("Scoring")
                            //Vector generated by the TensorFlow model is used in the training algorithm
                            .Append(mlContext.Model.LoadTensorFlowModel(_inceptionTensorFlowModel).
                                ScoreTensorFlowModel(outputColumnNames: new[] { "softmax2_pre_activation" }, inputColumnNames: new[] { "input" }, addBatchDimensionInput: true))
                            //adding estimator to map the string labels to integer key values(basic form of weighting)
                            .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName: "LabelKey", inputColumnName: "Label"))
                            //Adds the ML.Net training algorithm
                            .Append(mlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy(labelColumnName: "LabelKey", featureColumnName: "softmax2_pre_activation"))
                            //Adds an estimator to mapp the predicted key back into a usable string
                            .Append(mlContext.Transforms.Conversion.MapKeyToValue("PredictedLabelValue", "PredictedLabel"))
                            .AppendCacheCheckpoint(mlContext);
            //Load the training data using the "LoadFromTextFile" wrapper.
            IDataView trainingData = mlContext.Data.LoadFromTextFile<ImageData>(path: _trainTagsTsv, hasHeader: false); //IData describes tabular data

            // Train the model
            ITransformer model = pipeline.Fit(trainingData); //Trains model as "Fit" applies training dataset to the pipeline

            // Generate predictions from the test data, to be evaluated
            IDataView testData = mlContext.Data.LoadFromTextFile<ImageData>(path: _testTagsTsv, hasHeader: false);
            IDataView predictions = model.Transform(testData);

            // Create an IEnumerable for the predictions
            IEnumerable<ImagePrediction> imagePredictionData = mlContext.Data.CreateEnumerable<ImagePrediction>(predictions, true);
            DisplayResults(imagePredictionData);//stores the results for the accuracy of the model

            // Get performance metrics on the model using training data
            //string to show start of classification
            string ClassificationMetrics = "Classification metrics :";

            //instantiat the metrics for the classifier
            MulticlassClassificationMetrics metrics =
                mlContext.MulticlassClassification.Evaluate(predictions, labelColumnName: "LabelKey", predictedLabelColumnName: "PredictedLabel");//Evaluate method returns the model performance metrics (e.g LogLoss)

            //Log Loss is the negative avg og the log of corrected predicted probabilities in each instance 
            string logLoss = $"LogLoss is: {metrics.LogLoss}"; //stores string pertaining overall Log Loss
            string PerClassLogLoss = $"PerClassLogLoss is: {String.Join(" , ", metrics.PerClassLogLoss.Select(c => c.ToString()))}";//stores string of individual Log Loss
            StackMetrics.Push(ClassificationMetrics); //First in so will be last out 
            StackMetrics.Push(logLoss); //Second in so second out
            StackMetrics.Push(PerClassLogLoss); //Last in so last out 
            return model;
        }

        public static string ClassifySingleLogo(MLContext mlContext, ITransformer model)
        {
            // load the fully qualified image file name into ImageData
            var imageData = new ImageData()
            {
                ImagePath = _predictSingleImage
            };

            // Prediction function
            //The input is "ImageData" and the output is "ImagePrediction", ImagePrediction is what will be shown to the user
            var predictor = mlContext.Model.CreatePredictionEngine<ImageData, ImagePrediction>(model);
            var prediction = predictor.Predict(imageData);//This will run the pipeline that has been created with one example ("imageData")

            string Classification = $"Image: {Path.GetFileName(imageData.ImagePath)} predicted as: {prediction.PredictedLabelValue} with score: {prediction.Score.Max()} ";
            return Classification;
        }

        //This method shows that the training of the model is taking place.
        private static void DisplayResults(IEnumerable<ImagePrediction> imagePredictionData)
        {
            foreach (ImagePrediction prediction in imagePredictionData)
            {
                string displayResult = $"Image: {Path.GetFileName(prediction.ImagePath)} predicted as: {prediction.PredictedLabelValue} with score: {prediction.Score.Max()} ";
                TrainingResults.Enqueue(displayResult);
            }
        }

        //InceptionSettings is a struct that provides the parameters for modifying the logos so that they are the desired specifications/size
        private struct InceptionSettings
        {
            public const int ImageHeight = 224;
            public const int ImageWidth = 224;
            public const float Mean = 117;
            public const float Scale = 1;
            public const bool ChannelsLast = true;
        }

    }
    public class ImageData
    {
        [LoadColumn(0)]
        public string ImagePath; //This will contain the logo file name

        [LoadColumn(1)]
        public string Label; //This will have the value for the logo label ("business")
    }

    public class ImagePrediction : ImageData  //Image prediction class used by the classifier
    {
        public float[] Score; //confidence percentage for business types.

        public string PredictedLabelValue; //predicted classification label
    }
}
